/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.2
 * Generated at: 2018-01-23 09:30:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;

public final class GetComparisonTable_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	String baselineLoadTestNumber = request.getParameter("baselineTest");
	if(!baselineLoadTestNumber.equals("noSelection"))
	{
	String currLoadTestNumber     = request.getParameter("name");
	String currLoadTestDuration   = (String)session.getAttribute("testValue");
	String currDir = (String)session.getAttribute("currDir");
	session.setAttribute("baseLoadTestNew", baselineLoadTestNumber);
	session.setAttribute("currLoadTestNew", currLoadTestNumber);
	
	String productType = request.getParameter("prodType");
	
	String desiredCurrentFolder = currLoadTestNumber+"_"+currLoadTestDuration;
	String desiredBaselineFolder = baselineLoadTestNumber+"_"+currLoadTestDuration;
	   
	File[] listOfCurrentFoldersAggregate      = new File(currDir+"\\"+desiredCurrentFolder+"\\AggregateReport").listFiles();
    Arrays.sort(listOfCurrentFoldersAggregate);
	File[] listOfBaselineFoldersAggregate      = new File(currDir+"\\"+desiredBaselineFolder+"\\AggregateReport").listFiles();
    Arrays.sort(listOfBaselineFoldersAggregate);
	
	Set<File> hs1 = new TreeSet<>(Arrays.asList(listOfCurrentFoldersAggregate));
	Set<File> hs2 = new TreeSet<>(Arrays.asList(listOfBaselineFoldersAggregate));
	
   if(productType.equals("Overall"))
   {
	Set<String> allProductFile = new TreeSet<>();
	for(File temphs1: hs1)
       allProductFile.add(temphs1.getName());
	for(File temphs2: hs2)
       allProductFile.add(temphs2.getName());
   File mainFolder                       = new File(currDir);
   File[] mainFolders                    = mainFolder.listFiles();

      out.write("\r\n");
      out.write("<div class=\"text-center\">\r\n");
      out.write("        <div class=\"col-sm-12\">\r\n");
      out.write("\t\t\t<table class=\"table table-bordered table-hover\" style=\"font-size:14px;\">\r\n");
      out.write("            <thead>\r\n");
      out.write("                         <tr class=\"text-center text-primary\">\r\n");
      out.write("                           <th>Products</th>\r\n");
      out.write("                           <th>Average Response Time (Seconds)</th>\r\n");
      out.write("                           <th>Samples</th>\r\n");
      out.write("\t\t\t\t\t\t   <th>Error%</th>\r\n");
      out.write("                           <th>Average Response Time (Seconds)</th>\r\n");
      out.write("                           <th>Samples</th>\r\n");
      out.write("\t\t\t\t\t\t   <th>Error%</th>\r\n");
      out.write("\t\t\t\t\t\t   <th>Delta(Test ");
      out.print(currLoadTestNumber);
      out.write('-');
      out.print(baselineLoadTestNumber);
      out.write(")</th>\r\n");
      out.write("                         </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("\t\t\t");

						String prodCurrentNameWithExtension = "";String prodCurrentName = "";String pathProductCurrentAggregate = "";
						String prodBaselineNameWithExtension = "";String prodBaselineName = "";String pathProductBaselineAggregate = "";
                        String lineOverallBaseline="";String overallSampleBaseline="-";String overallResponseTimeBaseline="-";String overallErrorBaseline="-";
						String lineOverallCurrent="";String overallSampleCurrent="-";String overallResponseTimeCurrent="-";String overallErrorCurrent="-";
						String delta = "-";
						for(String tempFile : allProductFile)
						{
							prodBaselineNameWithExtension  = tempFile;
                            prodBaselineName               = prodBaselineNameWithExtension.replace(".csv","");
                            pathProductBaselineAggregate   = currDir+"\\"+desiredBaselineFolder+"\\AggregateReport\\"+prodBaselineNameWithExtension;
                            pathProductCurrentAggregate    = currDir+"\\"+desiredCurrentFolder+"\\AggregateReport\\"+prodBaselineNameWithExtension;
                            String[] dataInLineOverallBaseline;
                            String[] dataInLineOverallCurrent;
							
							if(hs2.toString().contains(tempFile)&&hs1.toString().contains(tempFile))
							{
                                 FileReader fileReaderOverallBaseline         = new FileReader(pathProductBaselineAggregate);
                                 BufferedReader bufferedReaderOverallBaseline = new BufferedReader(fileReaderOverallBaseline);
                                 while((lineOverallBaseline = bufferedReaderOverallBaseline.readLine()) != null){
                                     if(lineOverallBaseline.startsWith("TOTAL"))
                                     {
                                            dataInLineOverallBaseline        = lineOverallBaseline.split(",");
                                            overallSampleBaseline            = dataInLineOverallBaseline[1];
                                            overallResponseTimeBaseline      = String.format("%.03f", Float.parseFloat(dataInLineOverallBaseline[2])/1000);
											if(dataInLineOverallBaseline[7].contains("%"))
												overallErrorBaseline = dataInLineOverallBaseline[7];
											else
												overallErrorBaseline      = String.format("%.02f", Float.parseFloat(dataInLineOverallBaseline[7])*100)+"%";
                                     }
                                     else
                                       continue;
						        }
								 
								 FileReader fileReaderOverallCurrent         = new FileReader(pathProductCurrentAggregate);
                                 BufferedReader bufferedReaderOverallCurrent = new BufferedReader(fileReaderOverallCurrent);
                                 while((lineOverallCurrent = bufferedReaderOverallCurrent.readLine()) != null){
                                     if(lineOverallCurrent.startsWith("TOTAL"))
                                     {
                                            dataInLineOverallCurrent        = lineOverallCurrent.split(",");
                                            overallSampleCurrent            = dataInLineOverallCurrent[1];
                                            overallResponseTimeCurrent      = String.format("%.03f", Float.parseFloat(dataInLineOverallCurrent[2])/1000);
											if(dataInLineOverallCurrent[7].contains("%"))
												overallErrorCurrent = dataInLineOverallCurrent[7];
											else
                                            overallErrorCurrent      = String.format("%.02f", Float.parseFloat(dataInLineOverallCurrent[7])*100)+"%";
                                     }
                                     else
                                       continue;
						        }
								bufferedReaderOverallCurrent.close();
								fileReaderOverallCurrent.close();
								bufferedReaderOverallBaseline.close();
								fileReaderOverallBaseline.close();
							if(!overallResponseTimeBaseline.equals("-")&&!overallResponseTimeCurrent.equals("-"))
							{
								delta = String.format("%.03f", Float.parseFloat(overallResponseTimeCurrent)-Float.parseFloat(overallResponseTimeBaseline));
								if(Float.parseFloat(delta)>0.5)
									delta = "<span style='color:red;font-weight:600;'>"+delta+"</span>";
							}
			
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(prodBaselineName);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(overallResponseTimeBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallSampleBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallErrorBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(overallResponseTimeCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallSampleCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallErrorCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(delta);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t");

						   }
						
						else if(!hs2.toString().contains(tempFile)&&hs1.toString().contains(tempFile))
						{
								 overallResponseTimeBaseline=overallSampleBaseline=overallErrorBaseline="-";
							     FileReader fileReaderOverallCurrent         = new FileReader(pathProductCurrentAggregate);
                                 BufferedReader bufferedReaderOverallCurrent = new BufferedReader(fileReaderOverallCurrent);
                                 while((lineOverallCurrent = bufferedReaderOverallCurrent.readLine()) != null){
                                     if(lineOverallCurrent.startsWith("TOTAL"))
                                     {
                                            dataInLineOverallCurrent        = lineOverallCurrent.split(",");
                                            overallSampleCurrent            = dataInLineOverallCurrent[1];
                                            overallResponseTimeCurrent      = String.format("%.03f", Float.parseFloat(dataInLineOverallCurrent[2])/1000);
											if(dataInLineOverallCurrent[7].contains("%"))
												overallErrorCurrent = dataInLineOverallCurrent[7];
											else
                                            overallErrorCurrent      = String.format("%.02f", Float.parseFloat(dataInLineOverallCurrent[7])*100)+"%";
                                     }
                                     else
                                       continue;
						        }
								bufferedReaderOverallCurrent.close();
								fileReaderOverallCurrent.close();
								delta="-";
			
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(prodBaselineName);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(overallResponseTimeBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallSampleBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallErrorBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(overallResponseTimeCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallSampleCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallErrorCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(delta);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t");

						}
						
						else if(hs2.toString().contains(tempFile)&&!hs1.toString().contains(tempFile))
						{
								 overallResponseTimeCurrent=overallSampleCurrent=overallErrorCurrent="-";
                                 FileReader fileReaderOverallBaseline         = new FileReader(pathProductBaselineAggregate);
                                 BufferedReader bufferedReaderOverallBaseline = new BufferedReader(fileReaderOverallBaseline);
                                 while((lineOverallBaseline = bufferedReaderOverallBaseline.readLine()) != null){
                                     if(lineOverallBaseline.startsWith("TOTAL"))
                                     {
                                            dataInLineOverallBaseline        = lineOverallBaseline.split(",");
                                            overallSampleBaseline            = dataInLineOverallBaseline[1];
                                            overallResponseTimeBaseline      = String.format("%.03f", Float.parseFloat(dataInLineOverallBaseline[2])/1000);
											if(dataInLineOverallBaseline[7].contains("%"))
												overallErrorBaseline = dataInLineOverallBaseline[7];
											else
                                            overallErrorBaseline      = String.format("%.02f", Float.parseFloat(dataInLineOverallBaseline[7])*100)+"%";
                                     }
                                     else
                                       continue;
						        }
								bufferedReaderOverallBaseline.close();
								fileReaderOverallBaseline.close();
								delta="-";
						
			
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(prodBaselineName);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(overallResponseTimeBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallSampleBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallErrorBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(overallResponseTimeCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallSampleCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(overallErrorCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(delta);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t");

						}
					 }
			
      out.write("\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</div>\t\t \r\n");
      out.write("</div>\r\n");
      out.write(" ");
		}
 else{
	 
      out.write("\r\n");
      out.write("\t \r\n");
      out.write("\t <div class=\"text-center\">\r\n");
      out.write("        <div class=\"col-sm-12\">\r\n");
      out.write("\t\t\t<table class=\"table table-bordered table-hover\" style=\"font-size:14px;\">\r\n");
      out.write("            <thead>\r\n");
      out.write("                         <tr class=\"text-center text-primary\">\r\n");
      out.write("                           <th>Label</th>\r\n");
      out.write("                           <th>Average Response Time (Seconds)</th>\r\n");
      out.write("                           <th>Samples</th>\r\n");
      out.write("\t\t\t\t\t\t   <th>Error%</th>\r\n");
      out.write("                           <th>Average Response Time (Seconds)</th>\r\n");
      out.write("                           <th>Samples</th>\r\n");
      out.write("\t\t\t\t\t\t   <th>Error%</th>\r\n");
      out.write("\t\t\t\t\t\t   <th>Delta(Test ");
      out.print(currLoadTestNumber);
      out.write('-');
      out.print(baselineLoadTestNumber);
      out.write(")</th>\r\n");
      out.write("                         </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("\t \r\n");
      out.write("\t ");

			FileReader fileReaderOverallBaseline         = new FileReader(currDir+"\\"+desiredBaselineFolder+"\\AggregateReport\\"+productType+".csv");
            BufferedReader bufferedReaderOverallBaseline = new BufferedReader(fileReaderOverallBaseline);
			FileReader fileReaderOverallCurrent         = new FileReader(currDir+"\\"+desiredCurrentFolder+"\\AggregateReport\\"+productType+".csv");
            BufferedReader bufferedReaderOverallCurrent  = new BufferedReader(fileReaderOverallCurrent);
			Set<String> allTransactionName = new TreeSet<>();
			HashMap<String,String> baseTransactionName = new HashMap<String,String>();
			HashMap<String,String> currTransactionName = new HashMap<String,String>();
			String[] dataInLine;String label;String resTime;String sample;String err;
			String lineOverallBaseline="";String lineOverallCurrent="";
            while((lineOverallBaseline = bufferedReaderOverallBaseline.readLine()) != null){
                if(!lineOverallBaseline.startsWith("TOTAL")&&!lineOverallBaseline.startsWith("sampler_label"))
                {
					dataInLine       = lineOverallBaseline.split(",");
                    label            = dataInLine[0];
                    resTime            = String.format("%.03f", Float.parseFloat(dataInLine[2])/1000);
                    sample            = dataInLine[1];
					if(dataInLine[7].contains("%"))
						err            = dataInLine[7];
					else
                        err            = String.format("%.02f", Float.parseFloat(dataInLine[7])*100)+"%";
					baseTransactionName.put(label,sample+"*"+resTime+"*"+err);
					allTransactionName.add(label);
				}
			}
            while((lineOverallCurrent = bufferedReaderOverallCurrent.readLine()) != null){
                if(!lineOverallCurrent.startsWith("TOTAL")&&!lineOverallCurrent.startsWith("sampler_label"))
                {
					dataInLine        = lineOverallCurrent.split(",");
                    label            = dataInLine[0];
                    resTime            = String.format("%.03f", Float.parseFloat(dataInLine[2])/1000);
                    sample            = dataInLine[1];
                    sample            = dataInLine[1];
					if(dataInLine[7].contains("%"))
						err            = dataInLine[7];
					else
                        err            = String.format("%.02f", Float.parseFloat(dataInLine[7])*100)+"%";
					currTransactionName.put(label,sample+"*"+resTime+"*"+err);
					allTransactionName.add(label);
				}
			}
			bufferedReaderOverallBaseline.close();
			fileReaderOverallBaseline.close();
			bufferedReaderOverallCurrent.close();
			fileReaderOverallCurrent.close();
			String overallSampleBaseline="-";String overallResponseTimeBaseline="-";String overallErrorBaseline="-";
			String overallSampleCurrent="-";String overallResponseTimeCurrent="-";String overallErrorCurrent="-";
			
			for(String tempFile : allTransactionName)
			{
				String responseTimeBaseline="-";String sampleBaseline="-";String errorBaseline="-";
				String responseTimeCurrent="-";String sampleCurrent="-";String errorCurrent="-";
				String deltaResponse="-";String[] currTransactionDataArray;String[] baseTransactionDataArray;
				if(baseTransactionName.keySet().toString().contains(tempFile)&&currTransactionName.keySet().toString().contains(tempFile))
				{
					String currTransactionData = currTransactionName.get(tempFile);
					String baseTransactionData = baseTransactionName.get(tempFile);
					currTransactionDataArray = currTransactionData.split("\\*");
					baseTransactionDataArray = baseTransactionData.split("\\*");
					responseTimeBaseline = baseTransactionDataArray[1];
					sampleBaseline = baseTransactionDataArray[0];
					errorBaseline = baseTransactionDataArray[2];
					responseTimeCurrent = currTransactionDataArray[1];
					sampleCurrent = currTransactionDataArray[0];
					errorCurrent = currTransactionDataArray[2];
					if(!responseTimeBaseline.equals("-")&&!responseTimeCurrent.equals("-"))
							{
								deltaResponse = String.format("%.03f", Float.parseFloat(responseTimeCurrent)-Float.parseFloat(responseTimeBaseline));
								if(Float.parseFloat(deltaResponse)>0.5)
									deltaResponse = "<span style='color:red;font-weight:600;'>"+deltaResponse+"</span>";
							}
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-left\">");
      out.print(tempFile);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(responseTimeBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(sampleBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(errorBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(responseTimeCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(sampleCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(errorCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(deltaResponse);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t       ");

				}
				if(baseTransactionName.keySet().toString().contains(tempFile)&&!currTransactionName.keySet().toString().contains(tempFile))
				{
					String baseTransactionData = baseTransactionName.get(tempFile);
					baseTransactionDataArray = baseTransactionData.split("\\*");
					responseTimeBaseline = baseTransactionDataArray[1];
					sampleBaseline = baseTransactionDataArray[0];
					errorBaseline = baseTransactionDataArray[2];
					responseTimeCurrent = "-";
					sampleCurrent = "-";
					errorCurrent = "-";
					if(!responseTimeBaseline.equals("-")&&!responseTimeCurrent.equals("-"))
							{
								deltaResponse = String.format("%.03f", Float.parseFloat(responseTimeCurrent)-Float.parseFloat(responseTimeBaseline));
								if(Float.parseFloat(deltaResponse)>0.5)
									deltaResponse = "<span style='color:red;font-weight:600;'>"+deltaResponse+"</span>";
							}
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-left\">");
      out.print(tempFile);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(responseTimeBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(sampleBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(errorBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(responseTimeCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(sampleCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(errorCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(deltaResponse);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t       ");

				}
				if(!baseTransactionName.keySet().toString().contains(tempFile)&&currTransactionName.keySet().toString().contains(tempFile))
				{
					String currTransactionData = currTransactionName.get(tempFile);
					currTransactionDataArray = currTransactionData.split("\\*");
					responseTimeBaseline = "-";
					sampleBaseline = "-";
					errorBaseline = "-";
					responseTimeCurrent = currTransactionDataArray[1];
					sampleCurrent = currTransactionDataArray[0];
					errorCurrent = currTransactionDataArray[2];
					deltaResponse="-";
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-left\">");
      out.print(tempFile);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(responseTimeBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(sampleBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(errorBaseline);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-center\">");
      out.print(responseTimeCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(sampleCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(errorCurrent);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print(deltaResponse);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t       ");

				}
			}
			
      out.write("\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t\t");

    }
}
 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
