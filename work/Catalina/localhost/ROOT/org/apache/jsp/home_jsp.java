/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.2
 * Generated at: 2018-01-19 10:34:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.regex.Matcher");
    _jspx_imports_classes.add("java.util.regex.Pattern");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"index.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write(" \r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <link rel=\"icon\" href=\"../../QAminiLogo.ico\">\r\n");
      out.write("\r\n");
      out.write("    <title>SSO/CARES Reports</title>\r\n");
      out.write("\r\n");
      out.write("    <!-- Bootstrap core CSS -->\r\n");
      out.write("    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script>\r\n");
      out.write("    <script src=\"js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        $('ul.nav.navbar-nav.navbar-right li a').click(function() {\r\n");
      out.write("            $(this).parent().addClass('active').siblings().removeClass('active');\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        $(document).ready(function(){\r\n");
      out.write("          // Add smooth scrolling to all links\r\n");
      out.write("          $(\"a\").on('click', function(event) {\r\n");
      out.write("\r\n");
      out.write("            // Make sure this.hash has a value before overriding default behavior\r\n");
      out.write("            if (this.hash !== \"\") {\r\n");
      out.write("              // Prevent default anchor click behavior\r\n");
      out.write("              event.preventDefault();\r\n");
      out.write("\r\n");
      out.write("              // Store hash\r\n");
      out.write("              var hash = this.hash;\r\n");
      out.write("\r\n");
      out.write("              // Using jQuery's animate() method to add smooth page scroll\r\n");
      out.write("              // The optional number (200) specifies the number of milliseconds it takes to scroll to the specified area\r\n");
      out.write("              $('html, body').animate({\r\n");
      out.write("                scrollTop: $(hash).offset().top\r\n");
      out.write("              }, 200, function(){\r\n");
      out.write("\r\n");
      out.write("                // Add hash (#) to URL when done scrolling (default click behavior)\r\n");
      out.write("                window.location.hash = hash;\r\n");
      out.write("              });\r\n");
      out.write("            } // End if\r\n");
      out.write("          });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//AJAX\r\n");
      out.write("\t\t\tfunction saveBaselineNumber(baselineLoadTestNumber) {\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"submitBaselineNumber\").style.display = \"none\";\r\n");
      out.write("\t\t\t\tvar xhttp;\r\n");
      out.write("\t\t\t\tif (baselineLoadTestNumber.length == 0) { \r\n");
      out.write("\t\t\t\t\tdocument.getElementById(\"comparisonContent\").innerHTML = \"\";\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\txhttp = new XMLHttpRequest();\r\n");
      out.write("\t\t\t\txhttp.onreadystatechange = function() {\r\n");
      out.write("\t\t\t\t\tif (this.readyState == 4 && this.status == 200) {\r\n");
      out.write("\t\t\t\t\t\tdocument.getElementById(\"comparisonContent\").innerHTML = this.responseText;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\txhttp.open(\"POST\",\"baselineAdded.jsp?baselineLoadTestNumber=\"+baselineLoadTestNumber,true);\r\n");
      out.write("\t\t\txhttp.send();\r\n");
      out.write("\t\t\t}\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar newBaselineLoadTestNumber = \"\";\r\n");
      out.write("    </script>\r\n");
      out.write("    <style>\r\n");
      out.write("    .btn{\r\n");
      out.write("      font-size:14px;\r\n");
      out.write("      padding:4px 8px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .boldMaker{\r\n");
      out.write("     font-weight:600;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    th{\r\n");
      out.write("     background-color:#ADD8E6;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #transit{\r\n");
      out.write("    color:#777;\r\n");
      out.write("    cursor:pointer;\r\n");
      out.write("    text-decoration:none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    #transit:hover{\r\n");
      out.write("     color:white;\r\n");
      out.write("     background-color: #808080;\r\n");
      out.write("     font-weight:700;\r\n");
      out.write("    }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

     //String binDir                       = System.getProperty("user.dir").toString();
     String currDir                        = "..\\webapps\\ROOT\\Reports";
	 session.setAttribute("currDir", currDir);
     String name                           = request.getParameter("currLoadTestNumber");
	 session.setAttribute("name", name);
     String fullFolderLocationAggregate    = "";
     String fullFolderLocationResponseTime = "";
     String desiredFolder                  = "";
     File mainFolder                       = new File(currDir);
     File[] mainFolders                    = mainFolder.listFiles();
     String testTime = "";String testValue = "";
     String errorMsg = "";String fileName  = "";
	 String pattern = "";
     for(int j=0; j < mainFolders.length;j++)
          {
             fileName = mainFolders[j].getName().toString();
             if(fileName.startsWith(name.toString()))
             {
				pattern = name+"_(.+)";
				Pattern patternComplier = Pattern.compile(pattern);
				Matcher patternMatcher = patternComplier.matcher(fileName);
				if(patternMatcher.find())
				{
					testValue = patternMatcher.group(1);
					Float testDurationInHour = Float.parseFloat(testValue)/3600;
					Float testDurationLeftInSec = Float.parseFloat(testValue)%3600;
					Float testDurationInMinute = testDurationLeftInSec/60;
					testTime = String.format("%.00f",testDurationInHour) + " Hr, " + String.format("%.00f",testDurationInMinute) + "Min";
					break;
				}
             }
          }

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div>\r\n");
      out.write("      <nav class=\"navbar navbar-default\">\r\n");
      out.write("        <div class=\"container\" style=\"padding-left:0px;\">\r\n");
      out.write("          <div class=\"navbar-header\">\r\n");
      out.write("            <a href=\"#\" id=\"goTop\" style=\"cursor:default;\"><img src=\"../../qaLogo.jpg\" height=\"50px\" style=\"float:left;margin-left:-90px;\"/></a>\r\n");
      out.write("            <a class=\"navbar-brand\" style=\"cursor:default;font-size: 14px;\" href=\"#\">&nbsp;&nbsp;&nbsp;GALE REPORTS</a>\r\n");
      out.write("            <a class=\"navbar-brand\" style=\"cursor:default;font-size: 14px;\" href=\"#\">&nbsp;&nbsp;&nbsp;LOAD TEST NUMBER : ");
      out.print(name);
      out.write("</a>\r\n");
      out.write("            <a class=\"navbar-brand\" style=\"cursor:default;font-size: 14px;\" href=\"#\">DURATION : ");
      out.print(testTime);
      out.write("</a>\r\n");
      out.write("          </div>\r\n");
      out.write("          <div id=\"navbar\">\r\n");
      out.write("            <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("              <li class=\"active\"><a href=\"#AggregateReports\" data-toggle=\"tab\"><strong>Aggregate Reports</strong></a></li>\r\n");
      out.write("              <li><a href=\"#ResponseTime\" data-toggle=\"tab\"><strong>Response Time Graphs</strong></a></li>\r\n");
      out.write("              <li><a href=\"#ComparisonTab\" data-toggle=\"tab\"><strong>Comparison</strong></a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </nav>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("   <div class=\"footer\" style=\"position:fixed;z-index:999999;bottom:0;right:0;\">\r\n");
      out.write("   <a href=\"#goTop\" style=\"text-decoration:none;\">\r\n");
      out.write("   <button type=\"button\" class=\"btn btn-secondary\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"GO TOP\" style=\"background-color: Transparent;border: none;outline:none;\">\r\n");
      out.write("     <span class=\"glyphicon glyphicon glyphicon-triangle-top\" aria-hidden=\"true\"></span>\r\n");
      out.write("     <strong>TOP</strong>\r\n");
      out.write("   </button></a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"tab-content\">\r\n");
      out.write("      <div class=\"tab-pane active\" id=\"AggregateReports\">\r\n");
      out.write("      <div class=\"row\" style=\"margin-right:0;\">\r\n");
      out.write("      <div class=\"col-md-2\" style=\"position:fixed;background-color:#f8f8f8;\">\r\n");
      out.write("        <h4 class=\"text-center\" style=\"color:#111;\">PRODUCT NAME</h4>\r\n");

          if(!errorMsg.contains("Unable to fetch data"))
               {
				  session.setAttribute("testValue", testValue);
                  desiredFolder                      = name + "_" + testValue;
                  fullFolderLocationAggregate        = currDir +"\\"+desiredFolder+"\\AggregateReport";
                  fullFolderLocationResponseTime     = currDir +"\\"+desiredFolder+"\\ResponseTime";
                  File folderAggregate               = new File(fullFolderLocationAggregate);
                  File folderResponseTime            = new File(fullFolderLocationResponseTime);
                  File[] listOfFoldersAggregate      = folderAggregate.listFiles();
                  File[] listOfFoldersResponseTime   = folderResponseTime.listFiles();
                  Arrays.sort(listOfFoldersAggregate);
                  Arrays.sort(listOfFoldersResponseTime);
                  String prodNameWithExtension="";String prodName="";String pathProductAggregate="";
                  String prodResTimeWithExtension="";String prodResTime="";String pathProductResTime="";
                  String overallResponseTime;String overallSample = "";
                  String averageResponseTimeSLA = "";String errorSLA = "";
           
      out.write("\r\n");
      out.write("\r\n");
      out.write("           <ul style=\"list-style:none;padding:0px\">\r\n");
      out.write("           <div class=\"col-md-4\">\r\n");
      out.write("           ");

                  for(int i=0; i < listOfFoldersAggregate.length;i++)
                    {
                     prodNameWithExtension  = listOfFoldersAggregate[i].getName();
                     prodName               = prodNameWithExtension.replace(".csv","");
                     pathProductAggregate   = fullFolderLocationAggregate+"\\"+prodNameWithExtension;
                     if(i<18){
             
      out.write("\r\n");
      out.write("           <li class=\"addHoverManager\">\r\n");
      out.write("             <a class=\"btn cont\" id=\"transit\" href=\"#");
      out.print(prodName);
      out.write("\">\r\n");
      out.write("                ");
      out.print(prodName);
      out.write("\r\n");
      out.write("             </a>\r\n");
      out.write("           </li>\r\n");
      out.write("                    ");
}}
      out.write("\r\n");
      out.write("         </div>\r\n");
      out.write("         </ul>\r\n");
      out.write("\r\n");
      out.write("         <ul style=\"list-style:none;padding:0px\">\r\n");
      out.write("                    <div class=\"col-md-4 col-md-offset-2\">\r\n");
      out.write("                    ");

                           for(int i=0; i < listOfFoldersAggregate.length;i++)
                             {
                              prodNameWithExtension  = listOfFoldersAggregate[i].getName();
                              prodName               = prodNameWithExtension.replace(".csv","");
                              pathProductAggregate   = fullFolderLocationAggregate+"\\"+prodNameWithExtension;
                              if(i>17){
                      
      out.write("\r\n");
      out.write("                    <li class=\"addHoverManager\">\r\n");
      out.write("                      <a class=\"btn cont\" id=\"transit\" href=\"#");
      out.print(prodName);
      out.write("\">\r\n");
      out.write("                         ");
      out.print(prodName);
      out.write("\r\n");
      out.write("                      </a>\r\n");
      out.write("                    </li>\r\n");
      out.write("                             ");
}}
      out.write("\r\n");
      out.write("         </div>\r\n");
      out.write("         </ul>\r\n");
      out.write("\r\n");
      out.write("         </div>\r\n");
      out.write("         <div class=\"col-md-4 col-md-offset-2\">\r\n");
      out.write("            <h4 class=\"text-center\" style=\"background-color:#C2B280;color:white;padding-top:10px;padding-bottom:10px;border-radius:10px;\">Overall Average Response Time And Sample Counts For Individual Products</h4>\r\n");
      out.write("            <table class=\"table table-bordered table-hover\" style=\"font-size:14px;\">\r\n");
      out.write("            <thead>\r\n");
      out.write("                         <tr>\r\n");
      out.write("                           <th>Products</th>\r\n");
      out.write("                           <th>Average Response Time(Seconds)</th>\r\n");
      out.write("                           <th>Samples</th>\r\n");
      out.write("                         </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("            ");

                              for(int j=0; j < listOfFoldersAggregate.length;j++)
                                {
                                 prodNameWithExtension  = listOfFoldersAggregate[j].getName();
                                 prodName               = prodNameWithExtension.replace(".csv","");
                                 pathProductAggregate   = fullFolderLocationAggregate+"\\"+prodNameWithExtension;
                                 String lineOverall;
                                 String[] dataInLineOverall;
                                 FileReader fileReaderOverall         = new FileReader(pathProductAggregate);
                                 BufferedReader bufferedReaderOverall = new BufferedReader(fileReaderOverall);
                                 while ((lineOverall = bufferedReaderOverall.readLine()) != null) {
                                     if(lineOverall.startsWith("TOTAL"))
                                     {
                                            dataInLineOverall        = lineOverall.split(",");
                                            overallSample            = dataInLineOverall[1];
                                            overallResponseTime      = String.format("%.03f", Float.parseFloat(dataInLineOverall[2])/1000);
                                     }
                                     else
                                       continue;
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print(prodName);
      out.write("</td>\r\n");
      out.write("                <td class=\"text-center\">");
      out.print(overallResponseTime);
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print(overallSample);
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

                                }}
            
      out.write("\r\n");
      out.write("          </tbody>\r\n");
      out.write("         </table>\r\n");
      out.write("         </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("         <div class=\"col-md-3 col-md-offset-0\">\r\n");
      out.write("                     <h4 class=\"text-center\" style=\"background-color:#C2B280;color:white;padding-top:10px;padding-bottom:10px;border-radius:10px;\">Average Response Time Above SLA(>3 Sec)</h4>\r\n");
      out.write("                     <table class=\"table table-bordered table-hover\" style=\"font-size:14px;\">\r\n");
      out.write("                     ");

                                       for(int k=0; k < listOfFoldersAggregate.length;k++)
                                         {
                                          prodNameWithExtension  = listOfFoldersAggregate[k].getName();
                                          prodName               = prodNameWithExtension.replace(".csv","");
                                          pathProductAggregate   = fullFolderLocationAggregate+"\\"+prodNameWithExtension;
                                          String lock = "TRUE";
                                          String lineOverallSLA;
                                          String[] dataInLineOverallSLA;
                                          FileReader fileReaderOverallSLA         = new FileReader(pathProductAggregate);
                                          BufferedReader bufferedReaderOverallSLA = new BufferedReader(fileReaderOverallSLA);
                                          while ((lineOverallSLA = bufferedReaderOverallSLA.readLine()) != null) {
                                              if((!lineOverallSLA.startsWith("TOTAL"))&&(!lineOverallSLA.startsWith("sampler_label")))
                                              {
                                                     dataInLineOverallSLA     = lineOverallSLA.split(",");
                                                     averageResponseTimeSLA   = dataInLineOverallSLA[2];
                                                     Float tempAvgResSLA      = Float.parseFloat(averageResponseTimeSLA)/1000;
                                                     if(tempAvgResSLA>3.0)
                                                     {

                     
      out.write("\r\n");
      out.write("                                                                                 <thead>\r\n");
      out.write("                                                                                    <tr>\r\n");
      out.write("                                                                                    ");
if(lock.equals("TRUE"))
                                                                                      {
      out.write("\r\n");
      out.write("                                                                                         <th colspan=2 class=\"text-center\">");
      out.print(prodName);
      out.write("</th>\r\n");
      out.write("                                                                                      ");
}
      out.write("\r\n");
      out.write("                                                                                    </tr>\r\n");
      out.write("                                                                                 </thead>\r\n");
      out.write("                                                                                 <tbody>\r\n");
      out.write("                                                                                       <tr>\r\n");
      out.write("                                                                                            <td>");
      out.print(dataInLineOverallSLA[0]);
      out.write("</td>\r\n");
      out.write("                                                                                            <td>");
      out.print(String.format("%.03f", tempAvgResSLA));
      out.write("</td>\r\n");
      out.write("                                                                                      </tr>\r\n");
      out.write("                                                                                 </tbody>\r\n");
      out.write("\r\n");
      out.write("                    ");
                                lock = "FALSE";

                                                     }
                                              }
                                              else
                                                continue;

                                         }}
                     
      out.write("\r\n");
      out.write("                  </table>\r\n");
      out.write("         </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("         <div class=\"col-md-3 col-md-offset-0\" id=\"HideIfNoError\">\r\n");
      out.write("                    <h4 class=\"text-center\" style=\"background-color:#C2B280;color:white;padding-top:10px;padding-bottom:10px;border-radius:10px;\">Error Above SLA(>2%)</h4>\r\n");
      out.write("                                         <table class=\"table table-bordered table-hover\" style=\"font-size:14px;\">\r\n");
      out.write("                                         ");

                                                           String isError = "FALSE";
                                                           for(int k=0; k < listOfFoldersAggregate.length;k++)
                                                             {
                                                              prodNameWithExtension  = listOfFoldersAggregate[k].getName();
                                                              prodName               = prodNameWithExtension.replace(".csv","");
                                                              pathProductAggregate   = fullFolderLocationAggregate+"\\"+prodNameWithExtension;
                                                              String lock = "TRUE";
                                                              String lineOverallSLA;
                                                              String[] dataInLineOverallSLA;
                                                              FileReader fileReaderOverallSLA         = new FileReader(pathProductAggregate);
                                                              BufferedReader bufferedReaderOverallSLA = new BufferedReader(fileReaderOverallSLA);
                                                              while ((lineOverallSLA = bufferedReaderOverallSLA.readLine()) != null) {
                                                                  if((!lineOverallSLA.startsWith("TOTAL"))&&(!lineOverallSLA.startsWith("sampler_label")))
                                                                  {
                                                                         dataInLineOverallSLA   = lineOverallSLA.split(",");
                                                                         errorSLA               = dataInLineOverallSLA[7].replace("%","");
                                                                         Float tempErrorSLA     = Float.parseFloat(errorSLA)*100;
                                                                         if(tempErrorSLA>2.0)
                                                                         {

                                         
      out.write("\r\n");
      out.write("                                                                                                     <thead>\r\n");
      out.write("                                                                                                        <tr>\r\n");
      out.write("                                                                                                           ");
if(lock.equals("TRUE"))
                                                                                                           {
      out.write("\r\n");
      out.write("                                                                                                             <th colspan=2 class=\"text-center\">");
      out.print(prodName);
      out.write("</th>\r\n");
      out.write("                                                                                                           ");
}
      out.write("\r\n");
      out.write("                                                                                                        </tr>\r\n");
      out.write("                                                                                                        </thead>\r\n");
      out.write("                                                                                                        <tbody>\r\n");
      out.write("                                                                                                           <tr>\r\n");
      out.write("                                                                                                                <td>");
      out.print(dataInLineOverallSLA[0]);
      out.write("</td>\r\n");
      out.write("                                                                                                                <td>");
      out.print(String.format("%.02f", tempErrorSLA)+"%");
      out.write("</td>\r\n");
      out.write("                                                                                                          </tr>\r\n");
      out.write("                                                                                                        </tbody>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                                        ");
                                lock = "FALSE";
                                                                          isError = "TRUE";
                                                                         }
                                                                  }
                                                                  else
                                                                    continue;
                                                             }}
                                                             if(isError.equals("FALSE")){
                                         
      out.write("\r\n");
      out.write("                                                                <style>\r\n");
      out.write("                                                                    #HideIfNoError{\r\n");
      out.write("                                                                    display: none;\r\n");
      out.write("                                                                    }\r\n");
      out.write("                                                                </style>\r\n");
      out.write("                                         ");
}
      out.write("\r\n");
      out.write("                                      </table>\r\n");
      out.write("         </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("         ");

            for(int i=0; i < listOfFoldersAggregate.length;i++)
            {
                    prodNameWithExtension = listOfFoldersAggregate[i].getName();
                    prodName              = prodNameWithExtension.replace(".csv","");
                    pathProductAggregate  = fullFolderLocationAggregate+"\\"+prodNameWithExtension;
         
      out.write("\r\n");
      out.write("         <div class=\"col-md-10 col-md-offset-2\">\r\n");
      out.write("         <div class=\"text-center\" style=\"background-color:#46C7C7;margin-bottom:10px;margin-top:25px;border-radius:10px;\">\r\n");
      out.write("            <button type=\"button\" class=\"btn btn-outline-info btn-xs\" style=\"background-color: Transparent;border: none;outline:none;\" >\r\n");
      out.write("             <h3 class=\"text-center\" id=\"");
      out.print(prodName);
      out.write("\" style=\"color:white;\">");
      out.print(prodName);
      out.write("</h3>\r\n");
      out.write("            </button>\r\n");
      out.write("         </div>\r\n");
      out.write("\r\n");
      out.write("         <table class=\"table table-bordered table-hover table-condensed\" style=\"font-size:14px;\">\r\n");
      out.write("           <thead>\r\n");
      out.write("             <tr>\r\n");
      out.write("               <th>Label</th>\r\n");
      out.write("               <th>Sample</th>\r\n");
      out.write("               <th>Average(Sec.)</th>\r\n");
      out.write("               <th>Median(Sec.)</th>\r\n");
      out.write("               <th>90% Line</th>\r\n");
      out.write("               <th>Min(Sec.)</th>\r\n");
      out.write("               <th>Max(Sec.)</th>\r\n");
      out.write("               <th>Error%</th>\r\n");
      out.write("               <th>Throughput</th>\r\n");
      out.write("               <th>KB/Sec</th>\r\n");
      out.write("             </tr>\r\n");
      out.write("           </thead>\r\n");
      out.write("           <tbody>\r\n");
      out.write("         ");

         String line;
         String[] dataInLine;
         FileReader fileReader         = new FileReader(pathProductAggregate);
         BufferedReader bufferedReader = new BufferedReader(fileReader);
         while ((line = bufferedReader.readLine()) != null) {
                   if(line.startsWith("sampler_label"))
                        continue;

                   String bold = "";

                   dataInLine        = line.split(",");
                   String label      = dataInLine[0];

                    if(label.equals("TOTAL"))
                        bold = "class='boldMaker'";

                    if(label.contains("/"))
                       label=label.replaceAll("/"," / ");

                   int sample        = Integer.parseInt(dataInLine[1]);
                   float avg         = Float.parseFloat(dataInLine[2])/1000;
                   float median      = Float.parseFloat(dataInLine[3])/1000;
                   float ninetyline  = Float.parseFloat(dataInLine[4])/1000;
                   float min         = Float.parseFloat(dataInLine[5])/1000;
                   float max         = Float.parseFloat(dataInLine[6])/1000;
                   String error      = dataInLine[7];
                   String throughput = String.format("%.02f", Float.parseFloat(dataInLine[8]));
                   String kbpersec   = String.format("%.02f", Float.parseFloat(dataInLine[9]));
                   String errorString=error.replace("%","");
                   float errorFloat=Float.parseFloat(errorString)*100;
                   if(errorFloat>2.0)
                      errorString = "<td style='color:red;font-weight:600;'>"+String.format("%.02f", errorFloat)+"</td>";
                   else
                      errorString = "<td>"+String.format("%.02f", errorFloat)+"</td>";
                   String avgString;
                   if(avg>=3.0)
                    avgString = "<td style='color:red;font-weight:600;'>"+String.format("%.03f", avg)+"</td>";
                   else
                    avgString = "<td>"+String.format("%.03f", avg)+"</td>";
          
      out.write("\r\n");
      out.write("             <tr ");
      out.print(bold);
      out.write(">\r\n");
      out.write("                <td>");
      out.print(label);
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print(sample);
      out.write("</td>\r\n");
      out.write("                ");
      out.print(avgString);
      out.write("\r\n");
      out.write("                <td>");
      out.print(String.format("%.03f", median));
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print(String.format("%.03f", ninetyline));
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print(String.format("%.03f", min));
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print(String.format("%.03f", max));
      out.write("</td>\r\n");
      out.write("                ");
      out.print(errorString);
      out.write("\r\n");
      out.write("                <td>");
      out.print(throughput);
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print(kbpersec);
      out.write("</td>\r\n");
      out.write("              </tr>\r\n");
      out.write("          ");

          }
          bufferedReader.close();
          fileReader.close();
          
      out.write("\r\n");
      out.write("         </tbody>\r\n");
      out.write("         </table>\r\n");
      out.write("      </div>\r\n");
      out.write("         ");
}
      out.write("\r\n");
      out.write("      </div>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      <div class=\"tab-pane\" id=\"ResponseTime\">\r\n");
      out.write("        <div class=\"row\" style=\"margin-right:0;\">\r\n");
      out.write("         <div class=\"col-md-2\" style=\"position:fixed;background-color:#f8f8f8;\">\r\n");
      out.write("          <h4 class=\"text-center\" style=\"color:#111;\">PRODUCT NAME</h4>\r\n");
      out.write("          <ul style=\"list-style:none;padding:0px\">\r\n");
      out.write("              <div class=\"col-md-4\">\r\n");
      out.write("                    ");

                           for(int i=0; i < listOfFoldersResponseTime.length;i++)
                             {
                              prodResTimeWithExtension  = listOfFoldersResponseTime[i].getName();
                              prodResTime               = prodResTimeWithExtension.replace(".png","");
                              pathProductResTime   = fullFolderLocationResponseTime+"\\"+prodResTimeWithExtension;
                              if(i<18){
                      
      out.write("\r\n");
      out.write("                    <li class=\"addHoverManager\">\r\n");
      out.write("                      <a class=\"btn cont\" id=\"transit\" href=\"#");
      out.print(prodResTime);
      out.write("ResTime\">\r\n");
      out.write("                         ");
      out.print(prodResTime);
      out.write("\r\n");
      out.write("                      </a>\r\n");
      out.write("                    </li>\r\n");
      out.write("                             ");
}}
      out.write("\r\n");
      out.write("              </div>\r\n");
      out.write("              </ul>\r\n");
      out.write("\r\n");
      out.write("              <ul style=\"list-style:none;padding:0px\">\r\n");
      out.write("              <div class=\"col-md-4 col-md-offset-2\">\r\n");
      out.write("                                  ");

                                         for(int i=0; i < listOfFoldersResponseTime.length;i++)
                                           {
                                            prodResTimeWithExtension  = listOfFoldersResponseTime[i].getName();
                                            prodResTime               = prodResTimeWithExtension.replace(".png","");
                                            pathProductResTime   = fullFolderLocationResponseTime+"\\"+prodResTimeWithExtension;
                                            if(i>17){
                                    
      out.write("\r\n");
      out.write("                                  <li class=\"addHoverManager\">\r\n");
      out.write("                                    <a class=\"btn cont\" id=\"transit\" href=\"#");
      out.print(prodResTime);
      out.write("ResTime\">\r\n");
      out.write("                                       ");
      out.print(prodResTime);
      out.write("\r\n");
      out.write("                                    </a>\r\n");
      out.write("                                  </li>\r\n");
      out.write("                                           ");
}}
      out.write("\r\n");
      out.write("              </div>\r\n");
      out.write("              </ul>\r\n");
      out.write("         </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"col-md-10 col-md-offset-2\">\r\n");
      out.write("                    ");

                          for(int i=0; i < listOfFoldersResponseTime.length;i++)
                             {
                               prodResTimeWithExtension  = listOfFoldersResponseTime[i].getName();
                               prodResTime               = prodResTimeWithExtension.replace(".png","").replace(".PNG","");
                               pathProductResTime        = "Reports\\"+desiredFolder+"\\ResponseTime\\"+prodResTimeWithExtension;

                    
      out.write("\r\n");
      out.write("                    <h3 class=\"text-center\" id=\"");
      out.print(prodResTime);
      out.write("ResTime\">");
      out.print(prodResTime);
      out.write("</h3>\r\n");
      out.write("                    <div class=\"text-center\">\r\n");
      out.write("                     <img src=\"");
      out.print(pathProductResTime);
      out.write("\"  class=\"img-fluid img-thumbnail\" alt=\"");
      out.print(prodResTime);
      out.write(" : Response Time Graph\" width=700 height=400 style=\"padding:0px;\"/>\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                    ");
}
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("\t  \r\n");
      out.write("\t  \r\n");
      out.write("\t  \r\n");
      out.write("\t  \r\n");
      out.write("\t  \r\n");
      out.write("\t   <div class=\"tab-pane\" id=\"ComparisonTab\">\r\n");
      out.write("\t   \r\n");
      out.write("\t   ");

	        String isBaselineFilePresent = "false";
			File[] fullBaseFolder = new File(currDir +"\\"+desiredFolder).listFiles();
			for(int i=0; i < fullBaseFolder.length;i++)
			{
				if(fullBaseFolder[i].getName().contains("BaselineTestNum"))
				{
					isBaselineFilePresent = "true";
					break;
				}
			}
			if(!isBaselineFilePresent.equals("true"))
			{
		
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"jumbotron col-md-6 col-md-offset-3 text-center\"  id=\"submitBaselineNumber\">\r\n");
      out.write("\t\t\t\t\t<label>Please Enter Baseline Test Number : </label>\r\n");
      out.write("\t\t\t\t\t<select id=\"newCurrLoadTestNumber\" >\r\n");
      out.write("\t\t");

		        String[] tempTestNumList1;
				String tempTestNum1="";
				for(int j=0; j < mainFolders.length;j++)
				{
					fileName = mainFolders[j].getName().toString();
					if(fileName.endsWith(testValue))
					{
						tempTestNumList1 = fileName.split("_");
						tempTestNum1 = tempTestNumList1[0];
						if(!tempTestNum1.equals(name))
						{
		
      out.write("\r\n");
      out.write("\t\t\t\t    <option value=\"");
      out.print(tempTestNum1);
      out.write('"');
      out.write('>');
      out.print(tempTestNum1);
      out.write("</option>\r\n");
      out.write("\t\t");
			    }
					}
				}
		
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t    <input type=\"Button\" value = \"Submit\" onClick=\"saveBaselineNumber(newCurrLoadTestNumber.value)\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t");

			}
			else
			{
				FileReader fileReaderBaselineTest = new FileReader(currDir +"\\"+desiredFolder+"\\BaselineTestNum.txt");
				BufferedReader bufferedfileReaderBaselineTest = new BufferedReader(fileReaderBaselineTest);
				String baselineLoadTestNumber = bufferedfileReaderBaselineTest.readLine();
				session.setAttribute("baselineLoadTestNumber", baselineLoadTestNumber);
				
		
      out.write("\r\n");
      out.write("\t\t\t<div class=\"col-sm-offset-1 col-sm-10\">\t\r\n");
      out.write("\t\t\t\t<h4 class=\"text-center\" style=\"background-color:#C2B280;color:white;padding-top:10px;padding-bottom:10px;border-radius:10px;font-size: 20px;font-weight: 700;\">Comparison Table</h4>\r\n");
      out.write("\t\t\t\t<div class=\"col-sm-6 form-group text-center\" style=\"font-size: 18px;\">\r\n");
      out.write("\t\t\t\t\t<label class=\"text-danger\">Baseline Load Test : </label>\r\n");
      out.write("\t\t\t\t\t<select onchange=\"getProdType(this.value,document.getElementById('newCurrLoadTestNumber').value);getCompTable(this.value,document.getElementById('newCurrLoadTestNumber').value,'Overall');\" id=\"newBaselineLoadTestNumber\" name=\"newBaselineLoadTestNumber\">\r\n");
      out.write("\t\t\t\t\t   <option value=\"");
      out.print(baselineLoadTestNumber);
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print(baselineLoadTestNumber);
      out.write("</option>\r\n");
      out.write("\t\t");

		        String[] tempTestNumList;
				String tempTestNum="";
				for(int j=0; j < mainFolders.length;j++)
				{
					fileName = mainFolders[j].getName().toString();
					if(fileName.endsWith(testValue))
					{
						tempTestNumList = fileName.split("_");
						tempTestNum = tempTestNumList[0];
						if(!tempTestNum.equals(baselineLoadTestNumber))
						{
		
      out.write("\r\n");
      out.write("\t\t\t\t    <option value=\"");
      out.print(tempTestNum);
      out.write('"');
      out.write('>');
      out.print(tempTestNum);
      out.write("</option>\r\n");
      out.write("\t\t");
			    }
					}
				}
		
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"col-sm-6 form-group text-center\"  style=\"font-size: 18px;\">\r\n");
      out.write("\t\t\t\t\t<label class=\"text-center text-danger\">Current Load Test : </label>\r\n");
      out.write("\t\t\t\t\t<select onchange=\"getProdType(document.getElementById('newBaselineLoadTestNumber').value,this.value);getCompTable(document.getElementById('newBaselineLoadTestNumber').value,this.value,'Overall');\" id=\"newCurrLoadTestNumber\" > \r\n");
      out.write("\t\t\t\t\t   <option value=\"");
      out.print(name);
      out.write('"');
      out.write('>');
      out.print(name);
      out.write("</option>\r\n");
      out.write("\t\t");

		        String[] tempTestNumList1;
				String tempTestNum1="";
				for(int j=0; j < mainFolders.length;j++)
				{
					fileName = mainFolders[j].getName().toString();
					if(fileName.endsWith(testValue))
					{
						tempTestNumList1 = fileName.split("_");
						tempTestNum1 = tempTestNumList1[0];
						if(!tempTestNum1.equals(name))
						{
		
      out.write("\r\n");
      out.write("\t\t\t\t    <option value=\"");
      out.print(tempTestNum1);
      out.write('"');
      out.write('>');
      out.print(tempTestNum1);
      out.write("</option>\r\n");
      out.write("\t\t");
			    }
					}
				}
		
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"col-sm-1\" id=\"prodDropdown\" style=\"font-size:18px;margin-left:0px;margin-top:55px;padding-left:4px;float:left;position:fixed;\"></div>\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"col-sm-offset-1 col-sm-10\" id=\"comparisonTable\"></div>\r\n");
      out.write("\t\t\t\t<script>\r\n");
      out.write("\t\t\t\t\tfunction getCompTable(baseTest,currTest,prodType) {\r\n");
      out.write("\t\t\t\txhttp = new XMLHttpRequest();\r\n");
      out.write("\t\t\t\txhttp.onreadystatechange = function() {\r\n");
      out.write("\t\t\t\t\tif (this.readyState == 4 && this.status == 200) {\r\n");
      out.write("\t\t\t\t\t\tdocument.getElementById(\"comparisonTable\").innerHTML = this.responseText;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\txhttp.open(\"POST\",\"GetComparisonTable3.jsp?baselineTest=\"+baseTest+\"&name=\"+currTest+\"&prodType=\"+prodType,true);\r\n");
      out.write("\t\t\txhttp.send();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction getProdType(baseTest,currTest) {\r\n");
      out.write("\t\t\t\txhttp = new XMLHttpRequest();\r\n");
      out.write("\t\t\t\txhttp.onreadystatechange = function() {\r\n");
      out.write("\t\t\t\t\tif (this.readyState == 4 && this.status == 200) {\r\n");
      out.write("\t\t\t\t\t\tdocument.getElementById(\"prodDropdown\").innerHTML = this.responseText;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\txhttp.open(\"POST\",\"GetProdType.jsp?baselineTest=\"+baseTest+\"&name=\"+currTest,true);\r\n");
      out.write("\t\t\t\txhttp.send();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\twindow.onload=function() {\r\n");
      out.write("\t\t\t\t\t\t\t\tgetProdType(");
      out.print(baselineLoadTestNumber);
      out.write(',');
      out.print(name);
      out.write(");\r\n");
      out.write("\t\t\t\t\t\t\t\tgetCompTable(");
      out.print(baselineLoadTestNumber);
      out.write(',');
      out.print(name);
      out.write(",'Overall');\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t</script>\r\n");
      out.write("\t\t");

			}
	   
      out.write("\r\n");
      out.write("\t   <div id=\"comparisonContent\"></div>\r\n");
      out.write("      </div>\r\n");
      out.write("      ");
}
      out.write("\r\n");
      out.write("   </div>\r\n");
      out.write("   ");
      out.print(errorMsg);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
